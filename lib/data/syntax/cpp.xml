<?xml version="1.0"?>
<syntax>
    <name>C++</name>
    <format>
        <class id="keywords" style="keywords">\b$\b</class>
        <class id="types" style="types">\b$\b</class>
        <class id="storage-class" style="types">\b$\b</class>
        
        <regex style="literal">".*"</regex>
        <regex style="literal">[-+]?\b\d+\b</regex>
        <regex style="literal">\b0[xX][0-9a-fA-F]+\b</regex>
        <regex style="literal">(\b[0-9]+\.([0-9]+\b)?|\.[0-9]+\b)</regex>
        <regex style="literal">\b[0-9]+(\.[0-9]+)?(e[+-]?[0-9]+)?\b</regex>
        
        <regex style="preprocessor">#(define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)[^\n]*</regex>
        <regex style="preprocessor">#include[^"]*</regex>
        
        <comment style="comment">//</comment>
        
        <multiline style="comment">
            <start>/*</start>
            <end>*/</end>
        </multiline>
    </format>
    <data>
        <class id="keywords">
            <item>asm</item>
            <item>break</item>
            <item>case</item>
            <item>continue</item>
            <item>default</item>
            <item>do</item>
            <item>else</item>
            <item>enum</item>
            <item>for</item>
            <item>fortran</item>
            <item>goto</item>
            <item>if</item>
            <item>return</item>
            <item>struct</item>
            <item>switch</item>
            <item>typedef</item>
            <item>union</item>
            <item>while</item>
            <item>alignas</item>
            <item>alignof</item>
            <item>and</item>
            <item>and_eq</item>
            <item>bitand</item>
            <item>bitor</item>
            <item>catch</item>
            <item>compl</item>
            <item>constexpr</item>
            <item>const_cast</item>
            <item>decltype</item>
            <item>delete</item>
            <item>dynamic_cast</item>
            <item>false</item>
            <item>final</item>
            <item>friend</item>
            <item>new</item>
            <item>noexcept</item>
            <item>not</item>
            <item>not_eq</item>
            <item>nullptr</item>
            <item>operator</item>
            <item>or</item>
            <item>or_eq</item>
            <item>override</item>
            <item>private</item>
            <item>protected</item>
            <item>public</item>
            <item>reinterpret_cast</item>
            <item>static_assert</item>
            <item>static_cast</item>
            <item>this</item>
            <item>thread_local</item>
            <item>throw</item>
            <item>true</item>
            <item>try</item>
            <item>typeid</item>
            <item>using</item>
            <item>xor</item>
            <item>xor_eq</item>
            <item>class</item>
            <item>namespace</item>
            <item>typename</item>
            <item>template</item>
            <item>virtual</item>
        </class>
        <class id="types">
            <item>_Bool</item>
            <item>_Complex</item>
            <item>_Imaginary</item>
            <item>bool</item>
            <item>char</item>
            <item>char(16|32)_t</item>
            <item>double(_t)?</item>
            <item>float(_t)?</item>
            <item>int</item>
            <item>(u)?int(_least|_fast)?(8|16|32|64)_t</item>
            <item>(u)?intmax_t</item>
            <item>(u)?intptr_t</item>
            <item>long</item>
            <item>ptrdiff_t</item>
            <item>off(64)?_t</item>
            <item>short</item>
            <item>signed</item>
            <item>size_t</item>
            <item>ssize_t</item>
            <item>unsigned</item>
            <item>void</item>
            <item>wchar_t</item>
            <item>wint_t</item>
            <item>bool</item>
            <item>char16_t</item>
            <item>char32_t</item>
            <item>explicit</item>
            <item>export</item>
            <item>inline</item>
            <item>mutable</item>
            <item>nullptr_t</item>
            <item>wchar_t</item>
        </class>
        <class id="storage-class">
          <item>(_A|a)lignas</item>
          <item>_Atomic</item>
          <item>(_N|n)oreturn</item>
          <item>(_T|t)hread_local</item>
          <item>auto</item>
          <item>const</item>
          <item>extern</item>
          <item>inline</item>
          <item>register</item>
          <item>restrict</item>
          <item>static</item>
          <item>volatile</item>
        </class>
    </data>
</syntax>

